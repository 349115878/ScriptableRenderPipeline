<#@ include file="Common.ttinclude" once="true" #><#+
    static partial class MasterNodeGen
    {
        public struct DecalLayerMaskField : IField
        {
            public void Generate(GeneratedTextTransformation tt, MasterNodeDescription masterNode, FieldLocation location)
            {
                tt.__GenerateDecalLayerMaskField(masterNode, location);
            }
        }
    }
    void __GenerateDecalLayerMaskField(MasterNodeGen.MasterNodeDescription masterNode, MasterNodeGen.FieldLocation location)
    {
        switch (location)
        {
            case MasterNodeGen.FieldLocation.MasterNode:
            {
#>
[SerializeField] int m_DecalLayerMask = (int)DecalLayerMask.Layer0;
public DecalLayerMask decalLayerMask
{
    get => (DecalLayerMask)m_DecalLayerMask;
    set
    {
        if ((DecalLayerMask)m_DecalLayerMask == value) return;

        m_DecalLayerMask = (int)value;
        Dirty(ModificationScope.Graph);
    }
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.SettingsView:
            {
#>
void AddDecalLayerMaskField(PropertySheet ps, int indentLevel)
{
    ps.Add(new PropertyRow(CreateLabel("Decal Layer Mask", indentLevel)), (row) =>
    {
        row.Add(new MaskField(
            DecalLayerMask.LayerNames.ToList(),
            (int)DecalLayerMask.Full,
            null),
            field =>
            {
                field.value = (int) m_Node.decalLayerMask;
                field.RegisterValueChangedCallback(ChangeDecalLayerMask);
            });
    });
}

void ChangeDecalLayerMask(ChangeEvent<int> evt)
{
    m_Node.owner.owner.RegisterCompleteObjectUndo("Decal Layer Mask Change");
    m_Node.decalLayerMask = (DecalLayerMask)evt.newValue;
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.SubShader:
            {
#>
static void SetDecalLayerMaskActiveFields(<#= masterNode.Name #> masterNode, ActiveFields.Base baseActiveFields)
{
    if (masterNode.decalLayerMask == DecalLayerMask.None)
    {
        baseActiveFields.AddAll("DisableDecals");
    }
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.Migration:
            {
#>
[FormerlySerializedAs("m_ReceiveDecals")]
[SerializeField]
[Obsolete("Since 8.0.0, use m_DecalLayerMask instead.")]
bool m_ObsoleteReceiveDecals = true;

static partial class Migrations
{
#pragma warning disable 618
    public static void UseDecalLayerMask(<#= masterNode.Name #> instance)
    {
        instance.m_DecalLayerMask = (int)(instance.m_ObsoleteReceiveDecals
            ? DecalLayerMask.Full
            : DecalLayerMask.None);
    }
#pragma warning restore 618
}
<#+
                break;
            }
            default:
                throw new ArgumentOutOfRangeException(nameof(location));
        }
    }
#>
