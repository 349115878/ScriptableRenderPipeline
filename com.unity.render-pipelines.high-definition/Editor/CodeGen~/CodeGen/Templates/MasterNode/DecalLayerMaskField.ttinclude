<#@ include file="Common.ttinclude" once="true" #><#+
    static partial class MasterNodeGen
    {
        public struct DecalLayerMaskField : IField
        {
            public void Generate(GeneratedTextTransformation tt, MasterNodeDescription masterNode, FieldLocation location)
            {
                tt.__GenerateDecalLayerMaskField(masterNode, location);
            }
        }
    }
    void __GenerateDecalLayerMaskField(MasterNodeGen.MasterNodeDescription masterNode, MasterNodeGen.FieldLocation location)
    {
        switch (location)
        {
            case MasterNodeGen.FieldLocation.MasterNode:
            {
#>
[SerializeField] bool m_ReceiveDecals = true;
public bool receiveDecals
{
    get => m_ReceiveDecals;
    set
    {
        if (m_ReceiveDecals == value) return;

        m_ReceiveDecals = value;
        Dirty(ModificationScope.Graph);
    }
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.SettingsView:
            {
#>
void AddReceiveDecalsField(PropertySheet ps, int indentLevel)
{
    ps.Add(new PropertyRow(CreateLabel("Receive Decal", indentLevel)), (row) =>
    {
        row.Add(new Toggle(),
            field =>
            {
                field.value = m_Node.receiveDecals;
                field.RegisterValueChangedCallback(ChangeReceiveDecals);
            });
    });
}

void ChangeReceiveDecals(ChangeEvent<bool> evt)
{
    m_Node.owner.owner.RegisterCompleteObjectUndo("Support Decals Change");
    m_Node.receiveDecals = evt.newValue;
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.SubShader:
            {
#>
static void SetReceiveDecalsField(<#= masterNode.Name #> masterNode, ActiveFields.Base baseActiveFields)
{
    if (!masterNode.receiveDecals)
        baseActiveFields.AddAll("DisableDecals");
}
<#+
                break;
            }
            case MasterNodeGen.FieldLocation.Migration:
            {
                break;
            }
            default:
                throw new ArgumentOutOfRangeException(nameof(location));
        }
    }
#>
