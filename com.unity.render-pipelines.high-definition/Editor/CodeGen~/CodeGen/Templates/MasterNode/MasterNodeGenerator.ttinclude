<#@ template language="C#" #><#@
include file="Common.ttinclude" once="true" #><#@
include file="../Include.ttinclude" once="true" #><#+
    static partial class MasterNodeGen
    {
        public class MainGen
        {
            public string Name;
            public (int, string)[] Versions = {};
            public IField[] Fields = {};
        }
    }

    void Generate(MasterNodeGen.MainGen gen)
    {
        var masterNode = new MasterNodeGen.MasterNodeDescription {Name = $"{gen.Name}MasterNode"};
        var migrationSupport = new VersionedMigrationGen.VersionedMigration
        {
            VersionedTypeName = $"{gen.Name}MasterNode",
            Versions = gen.Versions
        };
#>
using System;
using System.Linq;
using Data.Util;
using UnityEditor.Graphing;
using UnityEditor.ShaderGraph.Drawing;
using UnityEditor.UIElements;
using UnityEngine;
using UnityEngine.Rendering.HighDefinition;
using UnityEngine.Serialization;
using UnityEditor.Graphing.Util;
using UnityEngine.UIElements;

namespace UnityEditor.Rendering.HighDefinition
{
<#+
    PushIndent("    ");
    Generate(migrationSupport);
    PopIndent();
#>

<#+ // Generated fields for the master node #>

    partial class <#= gen.Name #>MasterNode
    {
<#+
        PushIndent("        ");
        WriteLine("#region Fields");
        foreach (var field in gen.Fields)
            Generate(masterNode, field, MasterNodeGen.FieldLocation.MasterNode);
        WriteLine("#endregion");
        WriteLine("#region Migration");
        foreach (var field in gen.Fields)
            Generate(masterNode, field, MasterNodeGen.FieldLocation.Migration);
        WriteLine("#endregion");
        PopIndent();
#>
    }

    partial class <#= gen.Name #>SubShader
    {
<#+
        PushIndent("        ");
        foreach (var field in gen.Fields)
            Generate(masterNode, field, MasterNodeGen.FieldLocation.SubShader);
        PopIndent();
#>
    }
}

namespace UnityEditor.Rendering.HighDefinition.Drawing
{
    partial class <#= gen.Name #>SettingsView
    {
<#+
        PushIndent("        ");
        foreach (var field in gen.Fields)
            Generate(masterNode, field, MasterNodeGen.FieldLocation.SettingsView);
        PopIndent();
#>
    }
}
<#+
    }
#>

