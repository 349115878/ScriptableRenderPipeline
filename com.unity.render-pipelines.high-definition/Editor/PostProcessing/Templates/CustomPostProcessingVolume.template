using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.HighDefinition;
using System;

[Serializable, VolumeComponentMenu("Post-processing/Custom/#NAME#")]
public sealed class #SCRIPTNAME# : CustomPostProcessVolumeComponent, IPostProcessComponent
{
    public MaterialParameter m_MaterialParameter = new MaterialParameter(null);
    public InjectionPointParameter m_InjectionPoint = new InjectionPointParameter(CustomPostProcessInjectionPoint.AfterPostProcess);

    public bool IsActive() => m_MaterialParameter.value != null;

    public override CustomPostProcessInjectionPoint injectionPoint => m_InjectionPoint.value;

    public override void Render(CommandBuffer cmd, HDCamera camera, int srcShaderID, RTHandle source, RTHandle destination)
    {
        if (m_MaterialParameter.value == null)
            return;

        m_MaterialParameter.value.SetTexture(srcShaderID, source);
            
        int passIndex = m_MaterialParameter.value.FindPass("PostProcess");
        HDUtils.DrawFullScreen(cmd, m_MaterialParameter.value, destination, null, passIndex);
    }

    public override void Cleanup()
    {
        CoreUtils.Destroy(m_MaterialParameter.value);
    }
}
