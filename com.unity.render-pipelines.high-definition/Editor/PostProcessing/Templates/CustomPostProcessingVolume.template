using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.HighDefinition;
using System;
using UnityEngine.Experimental.Rendering.HDPipeline;
using UnityEngine.Experimental.Rendering;

[Serializable, VolumeComponentMenu("Post-processing/Custom/#NAME#")]
public sealed class #SCRIPTNAME# : CustomPostProcessVolumeComponent, IPostProcessComponent
{
    public MaterialParameter m_MaterialParameter = new MaterialParameter(null);

    public bool IsActive() => m_MaterialParameter.value != null;

    public override CustomPostProcessInjectionPoint injectionPoint => CustomPostProcessInjectionPoint.AfterPostProcess;

    public override void Render(CommandBuffer cmd, HDCamera camera, RTHandleSystem.RTHandle source, RTHandleSystem.RTHandle destination)
    {
        if (m_MaterialParameter.value == null)
            return;

        m_MaterialParameter.value.SetTexture("_InputTexture", source);
        HDUtils.DrawFullScreen(cmd, m_MaterialParameter.value, destination);
    }

    public override void Cleanup()
    {
        CoreUtils.Destroy(m_MaterialParameter.value);
    }
}
