#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma multi_compile _ PDF

#pragma kernel CSMainMinMaxFirstH       FIRST MINMAX HORIZONTAL     KerName=CSMainMinMaxFirstH
#pragma kernel CSMainMinMaxFirstV       FIRST MINMAX VERTICAL       KerName=CSMainMinMaxFirstV
#pragma kernel CSMainSumFirstH          FIRST SUM HORIZONTAL        KerName=CSMainSumFirstH
#pragma kernel CSMainSumFirstV          FIRST SUM VERTICAL          KerName=CSMainSumFirstV

#pragma kernel CSMainPDFMinMaxFirstH    PDF FIRST MINMAX HORIZONTAL KerName=CSMainPDFMinMaxFirstH
#pragma kernel CSMainPDFMinMaxFirstV    PDF FIRST MINMAX VERTICAL   KerName=CSMainPDFMinMaxFirstV
#pragma kernel CSMainPDFSumFirstH       PDF FIRST SUM HORIZONTAL    KerName=CSMainPDFSumFirstH
#pragma kernel CSMainPDFSumFirstV       PDF FIRST SUM VERTICAL      KerName=CSMainPDFSumFirstV

#pragma kernel CSMainMinMaxH            MINMAX HORIZONTAL           KerName=CSMainMinMaxH
#pragma kernel CSMainMinMaxV            MINMAX VERTICAL             KerName=CSMainMinMaxV
#pragma kernel CSMainSumH               SUM HORIZONTAL              KerName=CSMainSumH
#pragma kernel CSMainSumV               SUM VERTICAL                KerName=CSMainSumV

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesFunctions.hlsl"

  Texture2D<float4> _Input;
RWTexture2D<float4> _Output;

uint4 _Sizes; // xy: InputSize; zw: OutputSize
uint  _Iteration;

#define _InputSize  _Sizes.xy
#define _OutputSize _Sizes.zw

#ifdef VERTICAL
    #define THREAD_PER_GROUP_X 1
    #define THREAD_PER_GROUP_Y 8
#else // if HORIZONTAL
    #define THREAD_PER_GROUP_X 8
    #define THREAD_PER_GROUP_Y 1
#endif

#if defined(MINMAX)
    #define OutType float2
#else
    #define OutType float
#endif

OutType GetInput(uint2 pos)
{
#ifdef FIRST
//#ifdef PDF
//    float dotVal = SampleToPDFMeasure(_Input[pos].rgb);
//#else
//    float dotVal = dot(_Input[pos].rgb, /*(1.0f/3.0f)*/(1.0f).xxx);
//#endif
    float dotVal = dot(_Input[pos].rgb, (1.0f/3.0f).xxx);
    #if defined(MINMAX)
        return dotVal.xx;
    #else
        return dotVal;
    #endif
#else
    #if defined(MINMAX)
        return _Input[pos].xy;
    #elif defined(RGB)
        return _Input[pos].xyz;
    #else
        return _Input[pos].x;
    #endif
#endif
}

OutType GetSample(uint2 id, uint i)
{
#ifdef VERTICAL
    return GetInput(uint2(id.x               , id.y*_Iteration + i));
#else
    return GetInput(uint2(id.x*_Iteration + i, id.y               ));
#endif
}

float4 ToOutput(OutType v)
{
#if defined(MINMAX)
    return float4(v.xy, 0, 1);
#else
    return float4(v, 0, 0, 1);
#endif
}

[numthreads(THREAD_PER_GROUP_X, THREAD_PER_GROUP_Y, 1)]
void KerName(uint3 id : SV_DispatchThreadID)
{
    if (all(id.xy < _OutputSize))
    {
    #ifdef SUM
        OutType opVal =  0.0f;
    #elif defined(MINMAX)
        OutType opVal =  float2(HALF_MAX, -HALF_MAX);
    #endif

//#ifdef OP_PER_THREAD_1
//        UNITY_UNROLL
//#else
//        UNITY_LOOP
//#endif
        for (uint i = 0; i < _Iteration; ++i)
        {
#ifdef SUM
            opVal  += GetSample(id.xy, i);
            //opVal   = min(opVal, HALF_MAX);
#elif defined(MINMAX)
            float2 smpl = GetSample(id.xy, i);
            opVal.x = min(smpl.x, opVal.x);
            opVal.y = max(smpl.y, opVal.y);

            //opVal.x = max(opVal.x, -HALF_MAX);
            //opVal.y = min(opVal.y,  HALF_MAX);
#endif
        }

        _Output[id.xy] = 1.0f;
            //ToOutput(opVal);
    }
}
