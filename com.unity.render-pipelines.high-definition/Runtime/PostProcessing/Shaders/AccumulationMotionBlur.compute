#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMain

CBUFFER_START(AccumulationMotionBlurUniformBuffer)
float4 _AccumulationMotionBlurParams;
CBUFFER_END

#define _AccumulationWeight          _AccumulationMotionBlurParams.x
#define _AccumulationNormalizeWeight _AccumulationMotionBlurParams.y
#define _AccumulationSampleIndex     _AccumulationMotionBlurParams.z
#define _AccumulationSampleCount     _AccumulationMotionBlurParams.w

TEXTURE2D_X(_InputTexture);
TEXTURE2D_X(_InputHistoryTexture);

RW_TEXTURE2D_X(float3, _OutputTexture);
RW_TEXTURE2D_X(float3, _OutputHistoryTexture);

#define GROUP_SIZE 8

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void KMain(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));

    float2 uv = posInputs.positionNDC;
    float3 color   = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, s_point_clamp_sampler, uv * _RTHandleScale.xy, 0).xyz;
    float3 history = SAMPLE_TEXTURE2D_X_LOD(_InputHistoryTexture, s_point_clamp_sampler, uv * _RTHandleScaleHistory.xy, 0).xyz;
    
    // Uniformly weight sub-frame by inverse sample count.
    color *= _AccumulationWeight;

    // Do not accumulate the history sample in the case of a new frame. 
    color += history * step(1, _AccumulationSampleIndex);

    // Write accumulation to history
    _OutputHistoryTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = color;

    // Normalize the progressive accumulation for presentation to back buffer
    color /= _AccumulationNormalizeWeight;
    
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = color;
}